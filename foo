[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_162)
[info] loading global plugins from /Users/ztian/.sbt/1.0/plugins
[info] loading settings for project simmirror-build-build from metals.sbt ...
[info] loading project definition from /Users/ztian/Desktop/SimMirror/project/project
[info] loading settings for project simmirror-build from metals.sbt ...
[info] loading project definition from /Users/ztian/Desktop/SimMirror/project
[success] Generated .bloop/simmirror-build.json
[success] Total time: 1 s, completed Jun 9, 2021 12:19:01 PM
[info] loading settings for project simmirror from build.sbt,ecosim.sbt ...
[info] set current project to simmirror (in build file:/Users/ztian/Desktop/SimMirror/)
[info] set current project to example (in build file:/Users/ztian/Desktop/SimMirror/)
[info] compiling 1 Scala source to /Users/ztian/Desktop/SimMirror/custMacros/target/scala-2.12/classes ...
[info] done compiling
[info] compiling 2 Scala sources to /Users/ztian/Desktop/SimMirror/example/target/scala-2.12/classes ...
class Cell(var identity: watorCell) extends Actor {
  var elapsed_time_counter: Int = 0;
  var receivedRequests: List[meta.runtime.RequestMessage] = List();
  private var isReserved: Boolean = false;
  private var peekNeighbors: List[Future[scala.Tuple2[Long, watorCell]]] = List();
  private var tryMoving: Future[Boolean] = null;
  private var asyncReceiver: Cell = null;
  def getIdentity(): scala.Tuple2[Long, watorCell] = scala.Tuple2(id, identity);
  def relocate(newId: watorCell): Boolean = if (isReserved.`unary_!`)
    {
      isReserved = true;
      identity = newId;
      true
    }
  else
    false;
  def handleMessages(): Unit = {
    receivedRequests = popRequestMessages;
    receivedRequests.foreach(((m) => m.methodInfo match {
      case Left((x @ _)) => {
        val args = m.argss.flatten;
        if (x.==("getIdentity"))
          {
            val reply = getIdentity();
            m.reply(this, reply)
          }
        else
          ();
        if (x.==("relocate"))
          {
            val reply = relocate(args(0).asInstanceOf[watorCell]);
            m.reply(this, reply)
          }
        else
          ()
      }
      case Right((x @ _)) => ()
    }))
  };
  override def run() = org.coroutines.coroutine((() => while (true) 
    {
      if (identity.isInstanceOf[Water])
        println(id.+(" water!"))
      else
        {
          peekNeighbors = connectedAgents.map(((x) => x._2.asInstanceOf[Cell])).toList.map(((v) => {
            val request = new meta.runtime.RequestMessage(id, v.id, false, Left("getIdentity"), scala.collection.immutable.List());
            var future = meta.runtime.Future[scala.Tuple2[Long, watorCell]](request.sessionId);
            sendMessage(request);
            setMessageResponseHandler(request.sessionId, ((response: meta.runtime.Message) => future.setValue(response.asInstanceOf[meta.runtime.ResponseMessage].arg.asInstanceOf[scala.Tuple2[Long, watorCell]])));
            future
          }));
          while (peekNeighbors.nonEmpty.&&(peekNeighbors.forall(((x) => x.isCompleted))).`unary_!`) 
            {
              elapsed_time_counter = 0;
              while (elapsed_time_counter.<(1)) 
                {
                  elapsed_time_counter.+=(1);
                  org.coroutines.yieldval(sendMessages.toList);
                  handleMessages();
                  sendMessages.clear()
                }
              
            }
          ;
          val neighborIds = peekNeighbors.map(((i) => i.popValue.get)).asInstanceOf[List[scala.Tuple2[Long, watorCell]]];
          val waterCells: List[scala.Tuple2[Long, watorCell]] = neighborIds.filter(((x) => x._2.isInstanceOf[Water]));
          val emptySpot: Option[Cell] = if (waterCells.isEmpty)
            None
          else
            {
              val r: Int = scala.util.Random.nextInt(waterCells.length);
              assert(connectedAgents.get(waterCells(r)._1).isDefined);
              Some(connectedAgents(waterCells(r)._1).asInstanceOf[Cell])
            };
          val fishCells: List[scala.Tuple2[Long, watorCell]] = neighborIds.filter(((x) => x._2.isInstanceOf[Fish]));
          val nearbyFish: Option[Cell] = if (fishCells.isEmpty)
            None
          else
            {
              val r: Int = scala.util.Random.nextInt(fishCells.length);
              assert(connectedAgents.get(fishCells(r)._1).isDefined);
              Some(connectedAgents(fishCells(r)._1).asInstanceOf[Cell])
            };
          println(id.+(" ").+(identity).+(" nearby fish: ").+(nearbyFish).+(" empty spots ").+(emptySpot));
          if (identity.isInstanceOf[Fish])
            if (emptySpot.isDefined)
              {
                val currentEnergy = identity.energy;
                assert(emptySpot.isDefined);
                asyncReceiver = emptySpot.get;
                tryMoving = {
                  val request = new meta.runtime.RequestMessage(id, asyncReceiver.id, false, Left("relocate"), scala.collection.immutable.List(scala.collection.immutable.List(identity)));
                  var future = meta.runtime.Future[Boolean](request.sessionId);
                  sendMessage(request);
                  setMessageResponseHandler(request.sessionId, ((response: meta.runtime.Message) => future.setValue(response.asInstanceOf[meta.runtime.ResponseMessage].arg.asInstanceOf[Boolean])));
                  future
                };
                println(id.+(" tries to swim to nearby water!"));
                while (tryMoving.isCompleted.`unary_!`) 
                  {
                    elapsed_time_counter = 0;
                    while (elapsed_time_counter.<(1)) 
                      {
                        elapsed_time_counter.+=(1);
                        org.coroutines.yieldval(sendMessages.toList);
                        handleMessages();
                        sendMessages.clear()
                      }
                    
                  }
                ;
                val relocateSuccess: Boolean = tryMoving.popValue.get;
                println(id.+(" relocates : ").+(relocateSuccess));
                if (relocateSuccess.&&(isReserved.`unary_!`))
                  {
                    println(id.+(" fish swims away!"));
                    identity = Water(0)
                  }
                else
                  ();
                if (relocateSuccess.`unary_!`.&&(isReserved))
                  {
                    println(id.+(" fish is eaten!"));
                    identity.energy = identity.energy.+(currentEnergy)
                  }
                else
                  ()
              }
            else
              ()
          else
            if (identity.isInstanceOf[Shark])
              {
                println(id.+(" is a shark!"));
                if (nearbyFish.isDefined)
                  {
                    asyncReceiver = nearbyFish.get;
                    tryMoving = {
                      val request = new meta.runtime.RequestMessage(id, asyncReceiver.id, false, Left("relocate"), scala.collection.immutable.List(scala.collection.immutable.List(identity)));
                      var future = meta.runtime.Future[Boolean](request.sessionId);
                      sendMessage(request);
                      setMessageResponseHandler(request.sessionId, ((response: meta.runtime.Message) => future.setValue(response.asInstanceOf[meta.runtime.ResponseMessage].arg.asInstanceOf[Boolean])));
                      future
                    };
                    println(id.+(" tries to eat the nearby fish!"));
                    while (tryMoving.isCompleted.`unary_!`) 
                      {
                        elapsed_time_counter = 0;
                        while (elapsed_time_counter.<(1)) 
                          {
                            elapsed_time_counter.+=(1);
                            org.coroutines.yieldval(sendMessages.toList);
                            handleMessages();
                            sendMessages.clear()
                          }
                        
                      }
                    ;
                    if (tryMoving.popValue.get.&&(isReserved.`unary_!`))
                      {
                        println(id.+(" eats the fish!"));
                        identity = Water(0)
                      }
                    else
                      ()
                  }
                else
                  if (emptySpot.isDefined)
                    {
                      println(id.+(" shark tries to swim away!"));
                      asyncReceiver = emptySpot.get;
                      tryMoving = {
                        val request = new meta.runtime.RequestMessage(id, asyncReceiver.id, false, Left("relocate"), scala.collection.immutable.List(scala.collection.immutable.List(identity)));
                        var future = meta.runtime.Future[Boolean](request.sessionId);
                        sendMessage(request);
                        setMessageResponseHandler(request.sessionId, ((response: meta.runtime.Message) => future.setValue(response.asInstanceOf[meta.runtime.ResponseMessage].arg.asInstanceOf[Boolean])));
                        future
                      };
                      while (tryMoving.isCompleted.`unary_!`) 
                        {
                          elapsed_time_counter = 0;
                          while (elapsed_time_counter.<(1)) 
                            {
                              elapsed_time_counter.+=(1);
                              org.coroutines.yieldval(sendMessages.toList);
                              handleMessages();
                              sendMessages.clear()
                            }
                          
                        }
                      ;
                      if (tryMoving.popValue.get.&&(isReserved.`unary_!`))
                        {
                          println(id.+(" shark left!"));
                          identity = Water(0)
                        }
                      else
                        ();
                      if (isReserved)
                        println("Error! Shark should not be reserved!")
                      else
                        ()
                    }
                  else
                    ()
              }
            else
              ();
          if (identity.energy.<=(0))
            identity = Water(0)
          else
            identity.energy = identity.energy.-(1)
        };
      isReserved = false;
      {
        elapsed_time_counter = 0;
        while (elapsed_time_counter.<(1)) 
          {
            elapsed_time_counter.+=(1);
            org.coroutines.yieldval(sendMessages.toList);
            handleMessages();
            sendMessages.clear()
          }
        
      }
    }
  ))
}
class C extends Actor {
  var elapsed_time_counter: Int = 0;
  var receivedRequests: List[meta.runtime.RequestMessage] = List();
  def apiMtd1(foo: Int): Int = foo;
  def handleMessages(): Unit = {
    receivedRequests = popRequestMessages;
    receivedRequests.foreach(((m) => m.methodInfo match {
      case Left((x @ _)) => {
        val args = m.argss.flatten;
        if (x.==("apiMtd1"))
          {
            val reply = apiMtd1(args(0).asInstanceOf[Int]);
            m.reply(this, reply)
          }
        else
          ()
      }
      case Right((x @ _)) => ()
    }))
  };
  override def run() = org.coroutines.coroutine((() => while (true) 
    {
      handleMessages();
      {
        elapsed_time_counter = 0;
        while (elapsed_time_counter.<(1)) 
          {
            elapsed_time_counter.+=(1);
            org.coroutines.yieldval(sendMessages.toList);
            handleMessages();
            sendMessages.clear()
          }
        
      }
    }
  ))
}
class B(val a: Int) extends Actor {
  var elapsed_time_counter: Int = 0;
  var receivedRequests: List[meta.runtime.RequestMessage] = List();
  val bar: Int = 100;
  var foo: String = "Hello world!";
  var neighbor: C = null;
  private def apiMtd2(b: Int): Unit = println("Hello world!");
  def apiMtd1(aa: Int, f: String): Unit = {
    println("Secret is ".+(f));
    apiMtd2(aa)
  };
  def helper: Unit = println("This is a helper method!");
  def helper2(): Unit = println("This is a helper method!");
  def handleMessages(): Unit = {
    receivedRequests = popRequestMessages;
    receivedRequests.foreach(((m) => m.methodInfo match {
      case Left((x @ _)) => {
        val args = m.argss.flatten;
        if (x.==("apiMtd1"))
          {
            val reply = apiMtd1(args(0).asInstanceOf[Int], args(1).asInstanceOf[String]);
            m.reply(this, reply)
          }
        else
          ();
        if (x.==("helper"))
          {
            val reply = helper;
            m.reply(this, reply)
          }
        else
          ();
        if (x.==("helper2"))
          {
            val reply = helper2();
            m.reply(this, reply)
          }
        else
          ()
      }
      case Right((x @ _)) => ()
    }))
  };
  override def run() = org.coroutines.coroutine((() => while (true) 
    {
      var f = {
        val request = new meta.runtime.RequestMessage(id, neighbor.id, false, Left("apiMtd1"), scala.collection.immutable.List(scala.collection.immutable.List(100)));
        var future = meta.runtime.Future[Int](request.sessionId);
        sendMessage(request);
        setMessageResponseHandler(request.sessionId, ((response: meta.runtime.Message) => future.setValue(response.asInstanceOf[meta.runtime.ResponseMessage].arg.asInstanceOf[Int])));
        future
      };
      while (f.isCompleted.`unary_!`) 
        {
          {
            elapsed_time_counter = 0;
            while (elapsed_time_counter.<(1)) 
              {
                elapsed_time_counter.+=(1);
                org.coroutines.yieldval(sendMessages.toList);
                handleMessages();
                sendMessages.clear()
              }
            
          };
          handleMessages()
        }
      ;
      val reply = f.value.get;
      println("Receive reply! ".+(reply));
      {
        elapsed_time_counter = 0;
        while (elapsed_time_counter.<(1)) 
          {
            elapsed_time_counter.+=(1);
            org.coroutines.yieldval(sendMessages.toList);
            handleMessages();
            sendMessages.clear()
          }
        
      };
      handleMessages()
    }
  ))
}

[warn] Canceling execution...
[info] Compilation has been cancelled
[error] Cancelled: runMain example.cellularAutomata.wator.Example 50 50
[error] Use 'last' for the full log.
